# C:\Dasco1n\tools\stream-ops.ps1  (PS 5.1-safe)
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Write-Log {
  param(
    [ValidateSet(''INFO'',''WARN'',''ERROR'',''DEBUG'')]
    [string]$Level = ''INFO'',
    [string]$Message
  )
  $p = ("[{0}] [{1}] {2}" -f (Get-Date -Format ''u''), $Level, $Message)
  switch ($Level) {
    'INFO'  { Write-Host $p }
    'WARN'  { Write-Warning $Message }
    'ERROR' { Write-Error $Message }
    'DEBUG' { Write-Verbose $Message -Verbose }
  }
}] [$Level] $Message"
  switch($Level){'INFO'{Write-Host $p};'WARN'{Write-Warning $Message};'ERROR'{Write-Error $Message};'DEBUG'{Write-Verbose $Message -Verbose}}
}

function Get-StreamPaths {
  param([ValidateScript({ Test-Path $_ -PathType Container })][string]$RootPath='C:\Dasco1n')
  [ordered]@{
    Root=$RootPath
    Diagnose=(Join-Path $RootPath 'diagnose-stream-stack.ps1')
    Repair  =(Join-Path $RootPath 'repair-stream-stack.ps1')
    DiagBase=(Join-Path $RootPath '_diagnostics')
  }
}

function Get-LatestDiagnostics {
  param([string]$DiagBase)
  if (-not (Test-Path -LiteralPath $DiagBase)) { return [ordered]@{ Report=$null; Log=$null } }
  $md  = Get-ChildItem -Path $DiagBase -Recurse -File -Filter diagnostics.md  -EA SilentlyContinue | Sort-Object LastWriteTime -Desc | Select-Object -First 1
  $log = Get-ChildItem -Path $DiagBase -Recurse -File -Filter diagnostics.log -EA SilentlyContinue | Sort-Object LastWriteTime -Desc | Select-Object -First 1
  [ordered]@{ Report=$md; Log=$log }
}

function Invoke-StreamDiagnose {
  param(
    [ValidateScript({ Test-Path $_ -PathType Container })][string]$RootPath='C:\Dasco1n',
    [switch]$OnlineValidation,[switch]$CheckDependencies,[switch]$OpenReport,[switch]$TailLog
  )
  $p = Get-StreamPaths -RootPath $RootPath
  if (-not (Test-Path -LiteralPath $p.Diagnose)) { throw "Missing: $($p.Diagnose)" }
  Write-Log INFO ("Running diagnostics for {0} (OnlineValidation={1}, CheckDependencies={2})" -f $RootPath,$OnlineValidation,$CheckDependencies)
  & $p.Diagnose -RootPath $RootPath -OnlineValidation:$OnlineValidation -CheckDependencies:$CheckDependencies -Verbose
  $latest = Get-LatestDiagnostics -DiagBase $p.DiagBase
  if ($OpenReport -and $latest.Report) { Write-Log INFO ("Opening {0}" -f $latest.Report.FullName); Invoke-Item -LiteralPath $latest.Report.FullName }
  elseif ($TailLog -and $latest.Log)  { Write-Log INFO ("Tailing {0}"  -f $latest.Log.FullName);  Get-Content -LiteralPath $latest.Log.FullName -Tail 120 }
}

function Invoke-StreamRepair {
  param(
    [ValidateScript({ Test-Path $_ -PathType Container })][string]$RootPath='C:\Dasco1n',
    [switch]$InstallNodeDeps,[switch]$RunSmokeTests,[switch]$OnlineValidation
  )
  $p = Get-StreamPaths -RootPath $RootPath
  if (-not (Test-Path -LiteralPath $p.Repair)) { throw "Missing: $($p.Repair)" }
  Write-Log INFO ("Running repair/smoke for {0} (InstallNodeDeps={1}, RunSmokeTests={2}, OnlineValidation={3})" -f $RootPath,$InstallNodeDeps,$RunSmokeTests,$OnlineValidation)
  & $p.Repair -RootPath $RootPath -InstallNodeDeps:$InstallNodeDeps -RunSmokeTests:$RunSmokeTests -OnlineValidation:$OnlineValidation
}

function diag {
  param([ValidateScript({ Test-Path $_ -PathType Container })][string]$RootPath='C:\Dasco1n',[switch]$Heavy,[switch]$Open,[switch]$Tail)
  Invoke-StreamDiagnose -RootPath $RootPath -OnlineValidation:$Heavy -CheckDependencies:$Heavy -OpenReport:$Open -TailLog:$Tail
}
function repair {
  param([ValidateScript({ Test-Path $_ -PathType Container })][string]$RootPath='C:\Dasco1n',[switch]$Deps,[switch]$Tests,[switch]$Online)
  Invoke-StreamRepair -RootPath $RootPath -InstallNodeDeps:$Deps -RunSmokeTests:$Tests -OnlineValidation:$Online
}
function diagrepair {
  param([ValidateScript({ Test-Path $_ -PathType Container })][string]$RootPath='C:\Dasco1n',[switch]$Heavy)
  diag -RootPath $RootPath -Heavy:$Heavy -Tail
  repair -RootPath $RootPath -Deps -Tests -Online:$Heavy
  diag -RootPath $RootPath -Heavy:$Heavy -Open
}

# File watcher (debounced)
$script:StreamWatcher = $null
function Start-StreamWatch {
  param([ValidateScript({ Test-Path $_ -PathType Container })][string]$RootPath='C:\Dasco1n',[ValidateSet('diag','diagrepair')][string]$OnChange='diag')
  if ($script:StreamWatcher) { Write-Log WARN 'Watcher already running. Use Stop-StreamWatch first.'; return }
  $fsw = New-Object IO.FileSystemWatcher -Property @{ Path=$RootPath; IncludeSubdirectories=$true; Filter='*.*' }
  $fsw.NotifyFilter = [IO.NotifyFilters]'FileName, LastWrite, Size'; $fsw.EnableRaisingEvents=$true
  $state = [pscustomobject]@{ Root=$RootPath; Mode=$OnChange; LastRun=(Get-Date).AddMinutes(-10) }
  $action = {
    $s = $event.MessageData; $now=Get-Date
    if ( ($now - $s.LastRun).TotalSeconds -lt 5 ) { return }
    $s.LastRun = $now
    try {
      Write-Log INFO ("Change detected -> running {0}" -f $s.Mode)
      if ($s.Mode -eq 'diagrepair') { diag -RootPath $s.Root -Tail; repair -RootPath $s.Root -Deps -Tests; diag -RootPath $s.Root -Open }
      else { diag -RootPath $s.Root -Tail }
    } catch { Write-Log ERROR ("Watcher action failed: {0}" -f $_.Exception.Message) }
  }
  $regs = @()
  $regs += Register-ObjectEvent -InputObject $fsw -EventName Changed -MessageData $state -Action $action
  $regs += Register-ObjectEvent -InputObject $fsw -EventName Created -MessageData $state -Action $action
  $regs += Register-ObjectEvent -InputObject $fsw -EventName Deleted -MessageData $state -Action $action
  $script:StreamWatcher = [pscustomobject]@{ FSW=$fsw; Reg=$regs }
  Write-Log INFO ("Watcher started for {0}" -f $RootPath)
}
function Stop-StreamWatch {
  if ($script:StreamWatcher) {
    $script:StreamWatcher.Reg | Unregister-Event -ErrorAction SilentlyContinue
    try { $script:StreamWatcher.FSW.EnableRaisingEvents=$false; $script:StreamWatcher.FSW.Dispose() } catch {}
    $script:StreamWatcher = $null
    Write-Log INFO 'Watcher stopped.'
  } else { Write-Log WARN 'No watcher running.' }
}

function Install-StreamOpsProfile {
  $profilePath = $PROFILE
  $dir = Split-Path -Parent $profilePath
  if (-not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Path $dir -Force | Out-Null }
  if (-not (Test-Path -LiteralPath $profilePath)) { New-Item -ItemType File -Path $profilePath -Force | Out-Null }
  $import = ". 'C:\\Dasco1n\\tools\\stream-ops.ps1'"
  $cur = Get-Content -LiteralPath $profilePath -Raw -EA SilentlyContinue
  if ($cur -notlike '*stream-ops.ps1*') { Add-Content -LiteralPath $profilePath -Value $import; Write-Log INFO ("Profile updated -> {0}" -f $profilePath) }
  else { Write-Log INFO 'Profile already imports stream-ops.ps1' }
}

